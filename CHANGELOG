[TODO] Port views matchers from rspec to Remarkable to provide I18n.

# v3.0.0

[COMPATIBILITY] Removed route matcher. Rspec already provides two methods to
test your routes and they should be apart from controller specs. We might add
functionalities to routes son.

All others matchers :assign_to, :filter_params, :respond_with, :set_session and
:set_the_flash are kept.

redirect_to and render_template were ported from rspec-rails to remarkable to
provide I18n. The second was also extended to deal with :with_layout and
:with_content_type as options. render_with_layout, render_without_layout and
respond_with_content_type all delegate their logic to render_template matcher.

:set_the_flash was also redesign to match with :set_session, providing a
consistent API.

Finally, remarkable_rails now ships with a new feature, called macro stubs. This
allows you to declare just once your mocks and/or expectations, and each matcher
will know how to deal with properly. A TasksController could have your specs for
a destroy action rewritten like this:

  describe :delete => :destroy, :id => 37 do
    expects :find, :on => Task, :with => '37', :returns => proc { mock_task }
    expects :destroy, :on => mock_task

    should_assign_to :task, :equal => proc { mock_task }
    should_redirect_to { tasks_url }
  end

This will generate two tests, the first one will assert the assignment of
:task and the second will assert if the action is redirecting to tasks_url.
Based on describe and expects, each macro evaluates the expectation chain and
call delete :destroy with params :id => 37 before asserting values. The 
"describe :delete => :destroy, :id => 37" is a shortcut for:

  describe 'responding with #DELETE destroy' do
    delete :destroy, :id => 37

    # ...
  end

By default, should_assign_to will evaluate your macro stubs using expectations:

  Task.should_receive(:find).with('37').and_return(mock_task)

All others matcher, they evaluate it as stubs:

  Task.stub!(:find).and_return(mock_task)

You can change this suppling an option, :with_stubs or :with_expectations:

  should_assign_to :user, :with_stubs => true
  should_redirect_to(:with_expectations => true){ users_url }

  it { should assign_to(:user).with_stubs }
  it { should redirect_to(users_url).with_expectations }

Finally, you don't need to play with procs all the time when creating mocks.
You can call mock_project as a class method and it will create a proc for you,
which will reference the mock. So you can rewrite:

  expects :find, :on => Task, :with => '37', :returns => mock_task
  should_assign_to :task, :equal => mock_task

mock_task simply returns a proc that will call mock_task later. So you cannot do:

  expects :find_id, :on => Task, :returns => mock_task.id
  should_assign_to :task_id, :equal => mock_task.id

The proper way to do that would be:

  expects :find_id, :on => Task, :returns => proc { mock_task.id }
  should_assign_to :task_id, :equal => proc { mock_task.id }

If you don't like passing proc all around, you might like to the rspec way:

  it { should assign_to(:task_id, :with => mock_task.id) }

Finally, expects currently support four options: on, with, returns and times.
